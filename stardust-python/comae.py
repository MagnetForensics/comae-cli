#!/usr/bin/env python3
import requests, os, time, subprocess, argparse, math, sys

hostname = "api.comae.io"

def getApiKey(client_id, client_secret):
    body = {
        "grant_type": "client_credentials",
        "client_id": client_id,
        "client_secret": client_secret,
        "audience": "JHYFRulOwjLslg87tUt4bCT8i4O3yBsm",
    }

    uri = "https://comae.auth0.com/oauth/token"

    result = requests.post(uri, json=body)
    result_json = result.json()

    if "access_token" not in result_json:
        print("Failed to get api key", file=sys.stderr)
        print(result_json, file=sys.stderr)
        exit(1)

    return result_json["access_token"]

def uploadDump(filename, key):
    global hostname

    file = open(filename, "rb")
    filesize = os.path.getsize(filename)
    buffersize = 32 * 1024 * 1024
    num_of_chunks = math.ceil(filesize / buffersize)
    unique_id = str(filesize) + "-" + filename

    headers = {"Authorization": "Bearer " + key}

    for chunk_number in range(num_of_chunks):
        print(f"\rUploading {chunk_number} / {num_of_chunks} chunks", end="")
        chunk = file.read(buffersize)
        # When it's the last chunk the size can be smaller than the buffer
        chunk_size = len(chunk)
        url = f"https://{hostname}/v1/upload/dump/chunks?chunkSize={chunk_size}&chunk={chunk_number}&id={unique_id}&filename={filename}&chunks={num_of_chunks}"

        form_data = {
            "filename": (
                None,
                filename,
            ),  # Tuple of (filename, content, content type, dict of headers), we don't want a filename
            "file": (filename, chunk, "application/octet-stream"),
        }

        res = requests.post(url, headers=headers, files=form_data)

        if res.status_code != 200:
            print("Upload failed", file=sys.stderr)
            print(res.text, file=sys.stderr)
            exit(1)

    upload_complete_url = f"https://{hostname}/v1/upload/dump/completed"
    upload_details = {"id": unique_id, "filename": filename, "chunks": num_of_chunks}

    res = requests.post(upload_complete_url, headers=headers, json=upload_details)

    print("\nUpload complete!")

def isRoot():
    return os.getuid() == 0

def dumpIt():
    if not isRoot():
        print("Program must be run as root", file=sys.stderr)
        exit(1)

    current_time = time.strftime("%Y-%m-%d %H:%M:%S:000")
    kernel_release = os.uname()[2]
    filename = current_time + "." + kernel_release + ".core"

    # This way we can run the script from another path, we don't have to be in
    # the directory containing DumpIt
    dumpIt_path = os.path.dirname(os.path.realpath(__file__)) + "/DumpIt"

    print("Running dump to " + filename)
    subprocess.run([dumpIt_path, filename])

    print("Zipping it")
    subprocess.run(["zip", filename + ".zip", filename])

    return filename + ".zip"


if __name__ == "__main__":
    argparser = argparse.ArgumentParser(description="Comae Stardust Client")
    argparser.add_argument("--client-id", help="Client ID")
    argparser.add_argument("--client-secret", help="Client Secret")
    argparser.add_argument('-k', '--get-api-key', action='store_true')
    argparser.add_argument('-d', '--dump-it', action='store_true')
    args = argparser.parse_args()

    if not args.command:
        argparser.print_help()

    if not args.client_secret or not args.client_id:
        print("Provide client_secret and client_id", file=sys.stderr)
        exit(1)

    if args.get_api_key:
        print(getApiKey(args.client_id, args.client_secret))

    else if args.dump_it:
        print("Requesting Comae Stardust API key....")
        api_key = getApiKey(args.client_id, args.client_secret)
        print("Acquiring the memory image with Comae DumpIt...")
        filename = dumpIt()
        print("Uploading the core dump generated by Comae DumpIt to Comae Stardust....")
        uploadDump(filename, api_key)
